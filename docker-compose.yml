version: '3.8'

services:
  postgres-db:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file: .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ego-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  python-api:
    build:
      context: ./backend/python-api
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    env_file: .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - sandbox_tmp_data:/app/sandbox_tmp
    networks:
      - ego-network
    dns:
      - 8.8.8.8
      - 1.1.1.1

  go-api:
    build:
      context: ./backend/go-api
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    env_file: .env 
    depends_on:
      postgres-db:
        condition: service_healthy
      python-api:
        condition: service_started
    networks:
      - ego-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    env_file: .env
    volumes:
      - frontend-build:/app/build
    networks:
      - ego-network

  nginx-proxy:
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend-build:/usr/share/nginx/html
    depends_on:
      go-api:
        condition: service_started
      frontend:
        condition: service_completed_successfully
    networks:
      - ego-network

networks:
  ego-network:
    driver: bridge

volumes:
  postgres-data:
  frontend-build:
  sandbox_tmp_data:
    name: sandbox_tmp_data